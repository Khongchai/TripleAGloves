{"version":3,"sources":["webpack:///./src/components/atoms/Topic.tsx","webpack:///./src/pages/about.tsx","webpack:///./src/utils/functions/RecordUseFirstAsKeyForSecond.ts","webpack:///./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","webpack:///./src/components/atoms/TextHeader.tsx","webpack:///./src/components/atoms/HeaderCurve.tsx"],"names":["Topic","title","gatsbyImageData","setTopic","Container","onClick","StyledImage","alt","objectPosition","image","TopicDescription","styled","div","GatsbyImage","AboutHeader","AboutUs","valueArr","record","data","useStaticQuery","allTitles","allMdx","edges","map","edge","node","frontmatter","allNodes","useState","selectedTopic","setSelectedTopic","titleNodeMap","forEach","key","i","TextHeader","TopicSelector","tinyImg","childImageSharp","HeaderCurve","fill","viewBox","d","AboutBody","excerpt","TopicWallpaper","StyledImg","wallpaper","_objectDestructuringEmpty","obj","TypeError","props","color","svg"],"mappings":"6KAWaA,EAA8B,SAAC,GAItC,IAHJC,EAGI,EAHJA,MACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,SAEA,OACE,kBAACC,EAAD,CACEC,QAAS,WACPF,EAASF,KAGX,kBAACK,EAAD,CACEC,IAAI,kBACJC,eAAe,WACfC,MAAOP,IAET,kBAACQ,EAAD,KAAmBT,KAKnBG,EAAYO,IAAOC,IAAV,sEAAGD,CAAH,0NAWTL,EAAcK,YAAOE,KAAV,wEAAGF,CAAH,sCAKXD,EAAmBC,IAAOC,IAAV,6EAAGD,CAAH,+C,4BCoDhBG,GAFSC,UA/EyB,SAAC,GAAO,eAC9C,ICfAC,EAEMC,EDaAC,EAAOC,yBAAe,cAyBtBC,EAAsBF,EAAKG,OAAOC,MAAMC,KAC5C,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYzB,SAE1B0B,EAA2BT,EAAKG,OAAOC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QA7BtB,EA8BJG,mBAAiBR,EAAU,IAA9DS,EA9BuC,KA8BxBC,EA9BwB,KA+BxCC,GC7CNf,ED6C6DW,EC3CvDV,EAA4B,GD2CgBG,EC1C3CY,SAAQ,SAACC,EAAKC,GAAN,OAAajB,EAAOgB,GAAOjB,EAASkB,MAC5CjB,GD2CP,OACE,oCACE,kBAACH,EAAD,KACE,kBAACqB,EAAA,EAAD,KACE,4CACA,wFAGF,kBAACC,EAAD,KACGT,EAASJ,KAAI,SAACE,GAAD,OACZ,kBAAC,EAAD,CACEtB,SAAU2B,EACV7B,MAAOwB,EAAKC,YAAYzB,MACxBC,gBACEuB,EAAKC,YAAYW,QAAQC,gBAAgBpC,uBAMnD,kBAACqC,EAAA,EAAD,CAAaC,KAAK,OAAOC,QAAQ,gBAC/B,0BACED,KAAK,UACLE,EAAE,kHAGN,kBAACC,EAAD,KACE,kBAAC,EAAD,KACE,4BAAKZ,EAAaF,GAAeH,YAAYzB,OAC5C8B,EAAaF,GAAee,SAE/B,kBAACC,EAAD,KACE,kBAACC,EAAD,CACErC,MACEsB,EAAaF,GAAeH,YAAYqB,UAAUT,gBAC/CpC,gBAELM,eAAe,OACfD,IAAI,wBAUII,IAAOC,IAAV,qEAAGD,CAAH,gQAmBXyB,EAAgBzB,IAAOC,IAAV,uEAAGD,CAAH,wLAebgC,EAAYhC,IAAOC,IAAV,mEAAGD,CAAH,2JAWTD,EAAmBC,IAAOC,IAAV,0EAAGD,CAAH,qFAQhBkC,EAAiBlC,IAAOC,IAAV,wEAAGD,CAAH,eAIdmC,EAAYnC,YAAOE,KAAV,mEAAGF,CAAH,yC,oCE7JA,SAASqC,EAA0BC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCADvC,mC,kCCAA,sCAEaf,EAFb,UAE0BxB,EAAOC,IAAV,iEAAGD,CAAH,gFAIZ,SAAAwC,GAAK,OAAKA,EAAMC,MAAQD,EAAMC,MAAQ,Y,kCCNjD,sCAEab,EAFb,UAE2B5B,EAAO0C,IAAV,kEAAG1C,CAAH","file":"component---src-pages-about-tsx-874104457d3aecff8935.js","sourcesContent":["import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport Img from \"gatsby-image/withIEPolyfill\"\r\nimport { GatsbyImage } from \"gatsby-plugin-image\"\r\n\r\ninterface TopicProps {\r\n  title: string\r\n  setTopic: React.Dispatch<React.SetStateAction<string>>\r\n  gatsbyImageData: any\r\n}\r\n\r\nexport const Topic: React.FC<TopicProps> = ({\r\n  title,\r\n  gatsbyImageData,\r\n  setTopic,\r\n}) => {\r\n  return (\r\n    <Container\r\n      onClick={() => {\r\n        setTopic(title)\r\n      }}\r\n    >\r\n      <StyledImage\r\n        alt=\"topic-tinyImage\"\r\n        objectPosition=\"left top\"\r\n        image={gatsbyImageData}\r\n      />\r\n      <TopicDescription>{title}</TopicDescription>\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  height: 300px;\r\n  width: 350px;\r\n  background: white;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\r\n  cursor: url(\"illustrations/cursor/pointer.png\"), context-menu;\r\n`\r\nconst StyledImage = styled(GatsbyImage)`\r\n  flex: 0.7;\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\nconst TopicDescription = styled.div`\r\n  padding: 0.5em;\r\n\r\n  flex: 0.3;\r\n  text-align: center;\r\n`\r\n","import React, { useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { HeaderCurve } from \"../components/atoms/HeaderCurve\"\r\nimport { Topic } from \"../components/atoms/Topic\"\r\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport { useFirstAsKeyForSecondkeyArr } from \"../utils/functions/RecordUseFirstAsKeyForSecond\"\r\nimport { GatsbyImage } from \"gatsby-plugin-image\"\r\nimport { TextHeader } from \"../components/atoms/TextHeader\"\r\n\r\ninterface AboutUsProps {}\r\nexport type MdxData = {\r\n  excerpt: string\r\n  frontmatter: {\r\n    title: string\r\n    tinyImg: { childImageSharp: { gatsbyImageData: any } }\r\n    wallpaper: { childImageSharp: { gatsbyImageData: any } }\r\n  }\r\n}\r\nconst AboutUs: React.FC<AboutUsProps> = ({}) => {\r\n  const data = useStaticQuery(graphql`\r\n    query allMDX {\r\n      allMdx(filter: { frontmatter: { page: { eq: \"About\" } } }) {\r\n        edges {\r\n          node {\r\n            id\r\n            excerpt\r\n            frontmatter {\r\n              title\r\n              tinyImg {\r\n                childImageSharp {\r\n                  gatsbyImageData(layout: FULL_WIDTH)\r\n                }\r\n              }\r\n              wallpaper {\r\n                childImageSharp {\r\n                  gatsbyImageData(layout: FULL_WIDTH)\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n  const allTitles: string[] = data.allMdx.edges.map(\r\n    edge => edge.node.frontmatter.title\r\n  )\r\n  const allNodes: Array<MdxData> = data.allMdx.edges.map(edge => edge.node)\r\n  const [selectedTopic, setSelectedTopic] = useState<string>(allTitles[0])\r\n  const titleNodeMap = useFirstAsKeyForSecondkeyArr(allTitles, allNodes)\r\n\r\n  return (\r\n    <>\r\n      <AboutHeader>\r\n        <TextHeader>\r\n          <h3>Our Business</h3>\r\n          <p>Our factory has been established since the dawn of time.</p>\r\n        </TextHeader>\r\n\r\n        <TopicSelector>\r\n          {allNodes.map((node: MdxData) => (\r\n            <Topic\r\n              setTopic={setSelectedTopic}\r\n              title={node.frontmatter.title}\r\n              gatsbyImageData={\r\n                node.frontmatter.tinyImg.childImageSharp.gatsbyImageData\r\n              }\r\n            />\r\n          ))}\r\n        </TopicSelector>\r\n      </AboutHeader>\r\n      <HeaderCurve fill=\"none\" viewBox=\"0 0 1680 232\">\r\n        <path\r\n          fill=\"#B6D3F9\"\r\n          d=\"M0 0h1680v119.847S1428.43 231 1260 231C967.343 231 712.766 9.26 420 9.26 251.618 9.26 0 119.848 0 119.848V0z\"\r\n        />\r\n      </HeaderCurve>\r\n      <AboutBody>\r\n        <TopicDescription>\r\n          <h3>{titleNodeMap[selectedTopic].frontmatter.title}</h3>\r\n          {titleNodeMap[selectedTopic].excerpt}\r\n        </TopicDescription>\r\n        <TopicWallpaper>\r\n          <StyledImg\r\n            image={\r\n              titleNodeMap[selectedTopic].frontmatter.wallpaper.childImageSharp\r\n                .gatsbyImageData\r\n            }\r\n            objectPosition=\"left\"\r\n            alt=\"topic-wallpaper\"\r\n          />\r\n        </TopicWallpaper>\r\n      </AboutBody>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AboutUs\r\n\r\nconst AboutHeader = styled.div`\r\n  background: linear-gradient(\r\n    179deg,\r\n    #78b0fa 0.52%,\r\n    rgba(150, 191, 244, 0.669366) 103.48%,\r\n    rgba(173, 202, 240, 0) 235.36%\r\n  );\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 65vh;\r\n  height: auto;\r\n  width: 100%;\r\n  & > * {\r\n    color: black;\r\n  }\r\n`\r\n\r\nconst TopicSelector = styled.div`\r\n  width: 100%;\r\n  min-height: 20vh;\r\n  height: fit-content;\r\n  justify-content: space-evenly;\r\n  flex-wrap: wrap;\r\n  display: flex;\r\n  & > * {\r\n    margin-bottom: 1rem;\r\n    margin-right: 1rem;\r\n    position: relative;\r\n    z-index: 1001;\r\n  }\r\n`\r\n\r\nconst AboutBody = styled.div`\r\n  min-height: 70vh;\r\n  height: fit-content;\r\n  display: flex;\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  @media only screen and (max-width: 800px) {\r\n    flex-direction: column;\r\n  }\r\n  //padding: var(--spacingContent);\r\n`\r\nconst TopicDescription = styled.div`\r\n  flex: 0.3;\r\n  margin: 0;\r\n  background: #69a3ee;\r\n  color: white;\r\n  padding: var(--spacingContent);\r\n`\r\n\r\nconst TopicWallpaper = styled.div`\r\n  flex: 0.7;\r\n`\r\n\r\nconst StyledImg = styled(GatsbyImage)`\r\n  width: 100%;\r\n  height: 100%;\r\n  float: left;\r\n`\r\n","/**\r\n * First array will be used as key\r\n */\r\nexport function useFirstAsKeyForSecondkeyArr<T>(\r\n  keyArr: string[],\r\n  valueArr: T[]\r\n) {\r\n  const record: Record<string, T> = {}\r\n  keyArr.forEach((key, i) => (record[key] = valueArr[i]))\r\n  return record\r\n}\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import styled from \"styled-components\"\r\n\r\nexport const TextHeader = styled.div`\r\n  padding: var(--spacingContent);\r\n  text-align: center;\r\n  margin-top: 2rem;\r\n  color: ${props => (props.color ? props.color : \"black\")};\r\n`\r\n","import styled from \"styled-components\"\r\n\r\nexport const HeaderCurve = styled.svg`\r\n  left: 0;\r\n  position: relative;\r\n  width: 100vw;\r\n  height: auto;\r\n`\r\n"],"sourceRoot":""}